generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String               @unique
  phone              String
  address            String?
  role               UserRole
  password           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  token              String?              @unique
  loginToken         String?              @unique
  is_verified        Boolean              @default(false)
  loginExpiry        DateTime?
  LibraryTransaction LibraryTransaction[]
  // Parent             Parent?
  // Staff              Staff?
}

model Student {
  id                      Int                   @id @default(autoincrement())
  studentFullName         String?
  fatherName              String?
  motherName              String?
  contactNumber           String?
  studentAadharCardNumber String?               @unique
  emailAddress            String?
  admissionNumber         String?               @unique
  addmitionInClass        String?
  dob                     DateTime
  gender                  Gender
  enrollmentDate          DateTime              @default(now())
  religion                String?
  category                String?
  homeAddress             String?
  status                  StudentStatus         @default(ACTIVE)
  Attendance              Attendance[]
  Fee                     Fee[]
  HostelOccupant          HostelOccupant[]
  Result                  Result[]
  // class               Class?                @relation(fields: [classId], references: [id], onDelete: Cascade)
  // classId             Int?
  // parents             Parent?               @relation(fields: [parentId], references: [id], onDelete: Cascade)
  // parentId            Int?
  TransportAssignment     TransportAssignment[]
}

model Staff {
  id          Int         @id @default(autoincrement())
  staffNumber String
  dob         DateTime
  gender      Gender
  hireDate    DateTime    @default(now())
  role        StaffRole
  salary      Float
  // classes     Class[]     @relation("ClassTeacher")
  Course      Course[]
  Hostel      Hostel[]
  Timetable   Timetable[]
  // user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId      Int?         @unique
}

model Parent {
  id                    Int     @id @default(autoincrement())
  occupation            String?
  relationshipToStudent String
  // user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // userId                Int       @unique
  // students              Student[]
}

model Class {
  id        Int    @id @default(autoincrement())
  className String
  section   String
  // Attendance Attendance[]
  // classTeacher   Staff        @relation("ClassTeacher", fields: [classTeacherId], references: [id])
  // classTeacherId Int
  // students       Student[]
  // timetable  Timetable[]
}

model Course {
  id          Int         @id @default(autoincrement())
  courseName  String
  courseCode  String      @unique
  description String?
  credits     Int
  staffId     Int
  staff       Staff       @relation(fields: [staffId], references: [id])
  // exams       Exam[]
  timetables  Timetable[]
}

model Attendance {
  id        Int              @id @default(autoincrement())
  date      DateTime
  status    AttendanceStatus
  studentId Int
  remarks   String?
  // class     Class            @relation(fields: [classId], references: [id])
  // classId   Int
  student   Student          @relation(fields: [studentId], references: [id])
}

model Exam {
  id       Int      @id @default(autoincrement())
  examName String
  // date     DateTime @default(now())
  // course   Course   @relation(fields: [courseId], references: [id])
  // courseId Int 
  // results  Result[]
}

model Result {
  id            Int     @id @default(autoincrement())
  marksObtained Int
  grade         String
  remarks       String?
  studentId     Int
  // exam          Exam    @relation(fields: [examId], references: [id])
  // examId        Int
  student       Student @relation(fields: [studentId], references: [id])
}

model Fee {
  id        Int       @id @default(autoincrement())
  amount    Float
  dueDate   DateTime
  paidDate  DateTime?
  status    FeeStatus
  feeType   FeeType
  studentId Int
  student   Student   @relation(fields: [studentId], references: [id])
}

model Timetable {
  id        Int       @id @default(autoincrement())
  dayOfWeek DayOfWeek
  startTime DateTime
  endTime   DateTime
  // class     Class     @relation(fields: [classId], references: [id])
  // classId   Int
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  Int
  staff     Staff     @relation(fields: [staffId], references: [id])
  staffId   Int
}

model Library {
  id           Int                  @id @default(autoincrement())
  title        String
  author       String
  isbn         String               @unique
  category     String?
  quantity     Int
  transactions LibraryTransaction[]
}

model LibraryTransaction {
  id         Int           @id @default(autoincrement())
  borrowDate DateTime
  returnDate DateTime?
  status     LibraryStatus
  bookId     Int
  borrowerId Int
  book       Library       @relation(fields: [bookId], references: [id])
  borrower   User          @relation(fields: [borrowerId], references: [id])
}

model Transport {
  id         Int                   @id @default(autoincrement())
  routeName  String
  busNumber  String
  driverName String
  students   TransportAssignment[]
}

model TransportAssignment {
  id          Int       @id @default(autoincrement())
  studentId   Int
  transportId Int
  student     Student   @relation(fields: [studentId], references: [id])
  transport   Transport @relation(fields: [transportId], references: [id])
}

model Hostel {
  id         Int              @id @default(autoincrement())
  roomNumber String
  capacity   Int
  wardenId   Int
  warden     Staff            @relation(fields: [wardenId], references: [id])
  occupants  HostelOccupant[]
}

model HostelOccupant {
  id        Int       @id @default(autoincrement())
  studentId Int
  hostelId  Int
  startDate DateTime
  endDate   DateTime?
  hostel    Hostel    @relation(fields: [hostelId], references: [id])
  student   Student   @relation(fields: [studentId], references: [id])
}

enum UserRole {
  STUDENT
  STAFF
  PARENT
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ACTIVE
  GRADUATED
  TRANSFERRED
  INACTIVE
}

enum StaffRole {
  TEACHER
  ADMIN
  LIBRARIAN
  DRIVER
  WARDEN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum FeeStatus {
  PAID
  UNPAID
  PENDING
}

enum LibraryStatus {
  BORROWED
  RETURNED
  LOST
}

enum FeeType {
  TUITION
  TRANSPORT
  LIBRARY
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
